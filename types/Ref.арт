// The below copyright notice and the license permission notice
// shall be included in all copies or substantial portions.
// Copyright (C) 2016-2022 Nezaboodka Software <contact@nezaboodka.com>
// License: https://raw.githubusercontent.com/nezaboodka/reactronic/master/LICENSE
// By contributing, you agree that your contributions will be
// automatically licensed under the license referred above.

используется артель

внешние
{
  // export type BoolOnly<T> = Pick<T, {
  //     [P in keyof T]: T[P] extends boolean ? P : never
  // }[keyof T]>
  // export type GivenTypeOnly<T, V> = Pick<T, {
  //     [P in keyof T]: T[P] extends V ? P : never
  // }[keyof T]>
  // declare global {
  //     interface T extends Object {
  //         $$: {
  //             readonly [P in keyof T]-?: Ref<T[P]>
  //         }
  //     }
  // }

  операция refs<O: Object = Object>(owner: O): Нечто // { readonly [P in keyof O]-?: Ref<O[P]> }
  операция toggleRefs<O: Object = Object>(owner: O): Нечто // { readonly [P in keyof BoolOnly<O>]: ToggleRef<O[P]> }
  операция customToggleRefs<T, O: Object = Нечто>(owner: O, value1: T, value2: T): Нечто // { readonly [P in keyof GivenTypeOnly<O, T | Нечто>]: ToggleRef<O[P]> }

  тип Ref<T = Нечто> = объект
  {
    постоянное owner: Нечто
    постоянное name: Текст
    постоянное index: Число
    при создании(owner: Нечто, name: Текст, index: Число? = пусто)
    variable: T
    операция unobservable(): T
    операция observe(): T
    операция unobserve(): T
    общая операция sameRefs(v1: Ref, v2: Ref): Булево
    общая операция similarRefs(v1: Ref, v2: Ref): Булево
  }

  тип ToggleRef<T = Булево> = объект на основе Ref<T>
  {
    постоянное valueOn: T
    постоянное valueOff: T
    при создании(owner: Нечто, name: Текст, valueOn: T, valueOff: T)
    операция toggle(): Ничего
  }
}
