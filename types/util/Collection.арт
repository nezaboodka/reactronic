// The below copyright notice and the license permission notice
// shall be included in all copies or substantial portions.
// Copyright (C) 2016-2022 Nezaboodka Software <contact@nezaboodka.com>
// License: https://raw.githubusercontent.com/nezaboodka/reactronic/master/LICENSE
// By contributing, you agree that your contributions will be
// automatically licensed under the license referred above.

используется артель

внешние
{
  тип GetItemKey<T = Нечто> = операция(item: T): Текст?

  тип CollectionReader<T> = интерфейс
  {
    постоянное isStrict: Булево
    постоянное count: Число
    постоянное addedCount: Число
    постоянное removedCount: Число
    постоянное isMergeInProgress: Булево
    операция lookup(key: Текст): Item<T>?
    операция claim(key: Текст): Item<T>?
    операция add(instance: T): Item<T>
    операция remove(item: Item<T>): Ничего
    операция move(item: Item<T>, after: Item<T>): Ничего
    операция beginMerge(): Ничего
    операция endMerge(error_: unknown? = пусто): Ничего
    операция resetAddedAndRemovedLists(): Ничего
    операция lastClaimedItem(): Item<T>?
    операция items(): Generator<Item<T>>
    операция addedItems(reset: Булево? = пусто): Generator<Item<T>>
    операция removedItems(reset: Булево? = пусто): Generator<Item<T>>
    операция isAdded(item: Item<T>): Булево
    операция isMoved(item: Item<T>): Булево
    операция isRemoved(item: Item<T>): Булево
    операция isCurrent(item: Item<T>): Булево
  }

  тип Item<T> = интерфейс
  {
    постоянное instance: T
    постоянное prev: Item<T>? = пусто
    aux: Item<T>? = пусто
  }

  тип Collection<T> = объект на основе CollectionReader<T>
  {
    постоянное getKey: GetItemKey<T>
    при создании(getKey: GetItemKey<T>, strict: Булево? = пусто)
    isStrict: Булево
    защищённое count: Число
    защищённое addedCount: Число
    защищённое removedCount: Число
    защищённое isMergeInProgress: Булево
    операция lookup(key: Текст?): Item<T>?
    операция claim(key: Текст, resolution: объект { isDuplicate: Булево }? = пусто, error_: Текст? = пусто): Item<T>?
    операция add(instance: T): Item<T>
    операция remove(item: Item<T>): Ничего
    операция move(item: Item<T>, after: Item<T>): Ничего
    операция beginMerge(): Ничего
    операция endMerge(error_: Нечто? = пусто): Ничего
    операция resetAddedAndRemovedLists(): Ничего
    операция lastClaimedItem(): Item<T>?
    операция items(): Generator<Item<T>>
    операция addedItems(reset: Булево? = пусто): Generator<Item<T>>
    операция removedItems(reset: Булево? = пусто): Generator<Item<T>>
    операция isAdded(item: Item<T>): Булево
    операция isMoved(item: Item<T>): Булево
    операция isRemoved(item: Item<T>): Булево
    операция isCurrent(item: Item<T>): Булево
    операция markAsMoved(item: Item<T>): Ничего
    общая операция createItem<T>(instance: T): Item<T>
  }
}
